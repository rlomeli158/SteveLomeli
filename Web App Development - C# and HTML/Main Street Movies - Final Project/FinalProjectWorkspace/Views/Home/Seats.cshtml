
<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-1.14.0.css">
    <link rel="stylesheet" href="~/css/jquery.seat-charts.css">

</head>
<body>
    <div class="text-center">


        <div class="wrapper">
            <div class="container">

                <div class="booking-details">
                    <h2>Select Seats</h2>

                    <h3> Selected Seats (<span id="counter">0</span>):</h3>
                    <ul id="selected-seats"></ul>

                    Total: <b>$<span id="total">0</span></b>

                    <button class="checkout-button">Checkout »</button>

                    <div id="legend" class="seatCharts-legend">
                        <ul class="seatCharts-legendList">
                        </ul>
                    </div>

                </div>


                <div id="seat-map" class="seatCharts-container text-center" tabindex="0" aria-activedescendant="9_3">
                    <div class="front-indicator">Front</div>

                </div>


            </div>
        </div>

        <script src="https://code.jquery.com/jquery-1.11.0.min.js"></script>
        <script src="~/lib/jquery.seat-charts.js"></script>
        <div id="seat-map" class="seatCharts-container text-center">


            <script>var firstSeatLabel = 1;

                $(document).ready(function () {
                    var $cart = $('#selected-seats'),
                        $counter = $('#counter'),
                        $total = $('#total'),
                        sc = $('#seat-map').seatCharts({
                            map: [
                                '__ee_ee__',
                                'ffff_ffff',
                                'eeee_eeee',
                            ],
                            seats: {
                                f: {
                                    price: 12,
                                    classes: 'first-class', //your custom CSS class
                                    category: 'First Class'
                                },
                                e: {
                                    price: 12,
                                    classes: 'economy-class', //your custom CSS class
                                    category: 'Economy Class'
                                }

                            },
                            naming: {
                                top: false,
                                getLabel: function (character, row, column) {
                                    return firstSeatLabel++;
                                },
                            },
                            legend: {
                                node: $('#legend'),
                                items: [
                                    ['f', 'available', 'First Class'],
                                    ['e', 'available', 'Economy Class'],
                                    ['f', 'unavailable', 'Already Booked']
                                ]
                            },
                            click: function () {
                                if (this.status() == 'available') {
                                    //let's create a new <li> which we'll add to the cart items
                                    $('<li>' + this.data().category + ' Seat # ' + this.settings.label + ': <b>$' + this.data().price + '</b> <a href="#" class="cancel-cart-item text-light">[cancel]</a></li>')
                                        .attr('id', 'cart-item-' + this.settings.id)
                                        .data('seatId', this.settings.id)
                                        .appendTo($cart);

                                    /*
                                     * Lets update the counter and total
                                     *
                                     * .find function will not find the current seat, because it will change its stauts only after return
                                     * 'selected'. This is why we have to add 1 to the length and the current seat price to the total.
                                     */
                                    $counter.text(sc.find('selected').length + 1);
                                    $total.text(recalculateTotal(sc) + this.data().price);

                                    return 'selected';
                                } else if (this.status() == 'selected') {
                                    //update the counter
                                    $counter.text(sc.find('selected').length - 1);
                                    //and total
                                    $total.text(recalculateTotal(sc) - this.data().price);

                                    //remove the item from our cart
                                    $('#cart-item-' + this.settings.id).remove();

                                    //seat has been vacated
                                    return 'available';
                                } else if (this.status() == 'unavailable') {
                                    //seat has been already booked
                                    return 'unavailable';
                                } else {
                                    return this.style();
                                }
                            }
                        });

                    //this will handle "[cancel]" link clicks
                    $('#selected-seats').on('click', '.cancel-cart-item', function () {
                        //let's just trigger Click event on the appropriate seat, so we don't have to repeat the logic here
                        sc.get($(this).parents('li:first').data('seatId')).click();
                    });

                    //let's pretend some seats have already been booked
                    sc.get(['1_2', '4_1']).status('unavailable');

                });

                function recalculateTotal(sc) {
                    var total = 0;

                    //basically find every selected seat and sum its price
                    sc.find('selected').each(function () {
                        total += this.data().price;
                    });

                    return total;
                }</script>
        </div>
    </div>
</body>
</html>